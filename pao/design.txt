#
# This document includes notes about the design of PAO
#

duality

. Should this package expose specific dualization functions?

. Should we create an error if there is more than one objective when creating a linear dual?
This would further slow down the dualization process

. Should we setup a linear dualization function that does not do string manipulation?  This might be significantly faster.

. What other dualizations should be supported?  Quadratic?  Lagrangian?


bilevel

. Do we need an indexed SubModel class?
. What is the semantics of transformations for problems with multiple submodels?
. Should we re-add the 'var' constructor argument for SubModel?  What are the semantics
of this argument when variables in the submodel are not defined in the containing model?
. Update solvers to ensure that all relevant options are passed to the
subsolver
. Revisit transformation logic.  Is this the standard approach we want to follow?

pao.bilevel.plugins.dual

. Should we cache information about the deactivated components?

. Should we add error checking to confirm the following?
  1. This block is linear
  2. All of the variables in expressions are continuous (or fixed)

pao.bilevel.plugins.solver1

. There are really three ways we might want to setup problems:
  1. Dualize the subproblem, solve and update upper-level variables
  2. Dualize the subproblem, solve and update upper-level variables, fix upper-level variables, and resolve for the lower-level variables
  3. Dualize the subproblem but keep the primal subproblem constraints, solve and update upper- and lower-level variables for the primal problem, deactivate the dual subproblem

miscellaneous
